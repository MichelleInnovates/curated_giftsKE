import React, { useState } from 'react';
// Imports removed as we are inlining the functions

// --- Inlined SVG Icon ---
const LoadingSpinner = () => (
  <svg
    className="animate-spin -ml-1 mr-3 h-5 w-5 text-white"
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
  >
    <circle
      className="opacity-25"
      cx="12"
      cy="12"
      r="10"
      stroke="currentColor"
      strokeWidth="4"
    ></circle>
    <path
      className="opacity-75"
      fill="currentColor"
      d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
    ></path>
  </svg>
);

// --- Inlined Gemini API Helper Functions ---

/**
 * Implements exponential backoff for retrying API calls.
 * @param {number} attempt - The current retry attempt number.
 * @param {function} action - The async function to retry (e.g., the fetch call).
 */
async function exponentialBackoff(attempt, action) {
  if (attempt > 5) { // Max 5 retries
    throw new Error("API call failed after multiple retries.");
  }
  try {
    return await action();
  } catch (error) {
    const delay = Math.pow(2, attempt) * 1000 + Math.random() * 1000;
    // Do not log retry attempts to the console
    await new Promise(resolve => setTimeout(resolve, delay));
    return exponentialBackoff(attempt + 1, action);
  }
}

/**
 * Calls the Gemini API to get gift suggestions.
 * @param {string} userInput - The user's description of the gift recipient.
 * @returns {Promise<string>} - The AI-generated suggestion.
 */
async function callGeminiApi(userInput) {
  const systemPrompt = "You are a thoughtful and creative gift curator for 'Curated Gifts KE', a shop specializing in authentic, handcrafted treasures from Kenyan artisans. Your goal is to help users find the perfect gift from the collection. Be warm, descriptive, and connect the gift suggestion back to the artisan spirit.";
  
  const userQuery = `A user is looking for a gift. Here is their description: "${userInput}". 
  Our current featured products are:
  1. Handcrafted Ceramic Mug: Traditional glazed ceramic with modern elegance.
  2. Kenyan Coffee Collection: Premium single-origin beans from artisan farms.
  3. Woven Textile Runner: Hand-dyed patterns using ancestral techniques.
  
  Based on the user's description, suggest one or two of these products and explain *why* it would make a wonderful, story-rich gift. Keep your suggestion to a concise paragraph. If the description is too vague (e.g., "a gift"), gently ask for more details about the person's interests.`;

  const apiKey = ""; // Leave as-is, Canvas will provide it
  const apiUrl = `https://generativelightlanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-09-2025:generateContent?key=${apiKey}`;

  const payload = {
    contents: [{ parts: [{ text: userQuery }] }],
    systemInstruction: {
      parts: [{ text: systemPrompt }]
    },
  };

  const action = async () => {
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return response.json();
  };

  const result = await exponentialBackoff(1, action);
  
  const candidate = result.candidates?.[0];
  if (candidate && candidate.content?.parts?.[0]?.text) {
    return candidate.content.parts[0].text;
  } else {
    throw new Error("Unexpected API response format.");
  }
}
// --- End Inlined Functions ---


export default function GeminiGiftFinder() {
  const [description, setDescription] = useState("");
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState("");
  const [error, setError] = useState("");

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!description.trim()) {
      setError("Please describe who you're shopping for.");
      return;
    }
    
    setLoading(true);
    setResult("");
    setError("");
    
    try {
      const suggestion = await callGeminiApi(description);
      setResult(suggestion);
    } catch (err) {
      console.error("Gemini API call failed:", err);
      setError("Sorry, I couldn't come up with a suggestion right now. Please try again later.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <section className="bg-stone-100 py-20 md:py-32 fade-in-section">
      <div className="container mx-auto px-6 max-w-3xl text-center">
        <h2 className="text-3xl md:text-4xl font-bold text-black mb-4 font-serif-heading">
          âœ¨ Find The Perfect Gift
        </h2>
        <p className="text-lg text-gray-700 mb-8 font-sans-body">
          Not sure what to get? Describe the person you're shopping for (e.g., "my mom who loves gardening and coffee") and let our AI curator help!
        </p>
        
        <form onSubmit={handleSubmit} className="flex flex-col sm:flex-row gap-4">
          <input
            type="text"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            placeholder="e.g., My friend who loves hosting dinners..."
            className="flex-grow px-4 py-3 border border-stone-400 rounded-md focus:outline-none focus:ring-2 focus:ring-amber-700 text-black font-sans-body"
            disabled={loading}
          />
          <button
            type="submit"
            className="bg-amber-700 text-white px-8 py-3 rounded-md font-medium hover:bg-amber-800 transition-all transform hover:scale-105 shadow-lg flex items-center justify-center font-sans-body"
            disabled={loading}
          >
            {loading ? (
              <>
                <LoadingSpinner />
                <span className="text-white">Thinking...</span>
              </>
            ) : (
              "Get Suggestion"
            )}
          </button>
        </form>
        
        {error && (
          <div className="mt-6 p-4 bg-red-100 text-red-700 rounded-md font-sans-body">
            {error}
          </div>
        )}
        
        {result && (
          <div className="mt-8 p-6 bg-[#fdfcf9] border border-stone-200 rounded-lg text-left">
            <h4 className="font-semibold text-lg text-black mb-2 font-serif-heading">Our Suggestion:</h4>
            <p className="text-gray-800 whitespace-pre-wrap font-sans-body">{result}</p>
          </div>
        )}
      </div>
    </section>
  );
}